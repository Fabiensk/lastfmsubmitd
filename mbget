#!/usr/bin/python

import sys
import getopt
import musicbrainz
import lastfm.marshaller

class Abby(musicbrainz.mb):
    def __init__(self):
        musicbrainz.mb.__init__(self)

    def readcd(self, dev='/dev/cdrom'):
        self.SetDevice(dev)
        try:
            self.Query(musicbrainz.MBQ_GetCDTOC)
            return self.GetResultData(musicbrainz.MBE_TOCGetCDIndexId)
        except MusicBrainzError:
            raise RuntimeError('could not read TOC from disc')

    def fake(self):
        first = m.GetResultData1(musicbrainz.MBE_TOCGetFirstTrack)
        last = m.GetResultData1(musicbrainz.MBE_TOCGetLastTrack)

        tracks = []
        for i in range(first, last+1):
            tracks.append({
                'number': i,
                'artist': '',
                'title': '',
                'length': self.GetResultInt1(
                    musicbrainz.MBE_TOCGetTrackNumSectors, i) / 75,
                })

        return tracks

    def select(self, discid=None, albumid=None):
        if discid:
            self.SetDepth(2)
            self.QueryWithArgs(musicbrainz.MBQ_GetCDInfoFromCDIndexId,
                [discid])
        elif albumid:
            self.SetDepth(4)
            self.QueryWithArgs(musicbrainz.MBQ_GetAlbumById,
                [albumid])

        matches = self.GetResultInt(musicbrainz.MBE_GetNumAlbums)
        if matches == 0:
            raise RuntimeError('could not find an entry for this CD')
        if matches > 1:
            print >>sys.stderr, 'warning: multiple matches, using first'
        self.Select1(musicbrainz.MBS_SelectAlbum, 1)
        n = self.GetResultInt(musicbrainz.MBE_AlbumGetNumTracks)

        tracks = []
        for i in range(1, n+1):
            tracks.append({
                'number': i,
                'artist': self.GetResultData1(
                    musicbrainz.MBE_AlbumGetArtistName, i),
                'title': self.GetResultData1(
                    musicbrainz.MBE_AlbumGetTrackName, i),
                'length': self.GetResultInt1(
                    musicbrainz.MBE_AlbumGetTrackDuration, i) / 1000,
                'album': self.GetResultData(
                    musicbrainz.MBE_AlbumGetAlbumName),
                'mbid': self.GetIDFromURL(self.GetResultData1(
                    musicbrainz.MBE_AlbumGetTrackId, i)),
                })

        return tracks

if __name__ == '__main__':
    shortopts = 'd:i:a:n'
    longopts = ['device=', 'discid=', 'albumid=', 'no-lookup']

    try:
        opts, args = getopt.getopt(sys.argv[1:], shortopts, longopts)
    except getopt.GetoptError, e:
        print >>sys.stderr, 'error: %s' % e
        sys.exit(1)

    a = Abby()
    tracks = None

    for opt, arg in opts:
        if opt in ('--device', '-d'):
            id = a.readcd(arg)
            tracks = a.select(id)
        elif opt in ('--discid', '-i'):
            tracks = a.select(arg)
        elif opt in ('--albumid', '-a'):
            tracks = a.select(albumid=arg)
        elif opt in ('--no-lookup', '-n'):
            tracks = a.fake(None)
    if not tracks:
        id = a.readcd()
        tracks = a.select(id)

    if args:
        tracks = [tracks[int(a)-1] for a in args]

    for t in tracks:
        print lastfm.marshaller.dump(t)
