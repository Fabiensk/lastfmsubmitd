#!/usr/bin/python

import sys
import os
import time
import getopt

import lastfm
import lastfm.logger
import lastfm.queue
import lastfm.marshaller

USAGE = """\
usage: lastcd [--output FILE] [--debug] [--help]"""

if __name__ == '__main__':
    os.umask(002)

    shortopts = 'o:dh'
    longopts = [
        'output=',
        'debug',
        'help',
        ]

    try:
        opts, args = getopt.getopt(sys.argv[1:], shortopts, longopts)
    except getopt.GetoptError, e:
        print >>sys.stderr, 'lastcd: %s' % e
        print >>sys.stderr, USAGE
        sys.exit(1)

    debug = False
    outfile = lastfm.FIFO
    lock = lastfm.LOCK

    for opt, arg in opts:
        if opt in ('--output', '-o'):
            outfile = arg
            lock = None
        elif opt in ('--debug', '-d'):
            debug = True
        elif opt in ('--help', '-h'):
            print USAGE
            sys.exit(0)

    try:
        log = lastfm.logger.getlog('lastcd', lastfm.LOG, debug)
    except IOError, e:
        print >>sys.stderr, 'lastcd: error opening log: %s' % e
        sys.exit(1)

    songs = []
    for f in [file(name) for name in args] or [sys.stdin]:
        for song in lastfm.marshaller.load_documents(f.read()):
            songs.append(song)

    total_len = 0
    for s in songs:
        total_len += s['length']

    # We will simulate things as if the last track in our input just
    # finished playing right now.

    pos = time.time() - total_len

    subs = []
    for s in songs:
        l = s['length']
        if l:
            if l >= lastfm.MIN_LEN and l <= lastfm.MAX_LEN:
                date = pos + l / 2
                s['time'] = time.gmtime(pos)
                subs.append(s)
            pos = pos + l
        else:
            print >>sys.stderr, 'lastcd: track has zero length'
            sys.exit(1)

    if not subs:
        print >>sys.stderr, 'lastcd: no usable tracks found'
        sys.exit(1)

    if outfile == '-':
        for s in subs:
            print lastfm.marshaller.dump(s)
    else:
        try:
            out = lastfm.queue.Writer(log, outfile, lock)
            log.info('Sending %s song(s) to daemon' % len(subs))
            for s in subs:
                print >>out, lastfm.marshaller.dump(s)
                log.debug('Sent song: %s' % lastfm.logger.repr(s))
        except IOError, e:
            print >>sys.stderr, 'lastcd: error writing: %s' % e
