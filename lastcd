#!/usr/bin/python

import sys
import os
import getopt
import musicbrainz
import musicbrainz.queries as mq

import asyaml

DEF_CD_DEV = '/dev/cdrom'

# TODO:
#
# * --cdrom should take an argument, e.g. /dev/cdrom1. musicbrainz.queries
#   doesn't seem to provide for this.

def lookup_toc(mb):
    mb.SetDepth(2)
    mb.Query(mq.MBQ_GetCDTOC)
    id = mb.GetResultData(mq.MBE_TOCGetCDIndexId)
    mb.QueryWithArgs(mq.MBQ_GetCDInfoFromCDIndexId, [id])

def lookup_dumb(mb):
    mb.SetDepth(2)
    mb.Query(mq.MBQ_GetCDInfo)

def lookup_discid(mb, id):
    mb.SetDepth(2)
    mb.QueryWithArgs(mq.MBQ_GetCDInfoFromCDIndexId, [id])

def lookup_albumid(mb, id):
    mb.SetDepth(4)
    mb.QueryWithArgs(mq.MBQ_GetAlbumById, [id])

if __name__ == "__main__":
    shortopts = 'cud:a:'
    longopts = ['cdrom', 'dumb', 'discid=', 'albumid=']

    # remember, we need to SetDepth once we know what kind of query
    mb = musicbrainz.mb()

    opts, args = getopt.getopt(sys.argv[1:], shortopts, longopts)

    if opts:
        for opt, arg in opts:
            if opt in ('--cdrom', '-c'):
                lookup_toc(mb)
            if opt in ('--dumb', '-u'):
                lookup_dumb(mb)
            if opt in ('--discid', '-d'):
                lookup_discid(mb, arg)
            if opt in ('--albumid', '-a'):
                lookup_albumid(mb, arg)
    else:
        lookup_toc(mb)

    matches = mb.GetResultInt(mq.MBE_GetNumAlbums)
    if matches == 0:
        print >>sys.stderr, "could not find an entry for this CD"
        sys.exit(1)
    if mb.GetResultInt(mq.MBE_GetNumAlbums) > 1:
        print >>sys.stderr, "warning: multiple matches, using first"

    mb.Select1(mq.MBS_SelectAlbum, 1)
    artist = mb.GetResultData1(mq.MBE_AlbumGetArtistName, 1)
    album = mb.GetResultData(mq.MBE_AlbumGetAlbumName)
    n = mb.GetResultInt(mq.MBE_AlbumGetNumTracks)

    if args:
        tracks = map(int, args)
    else:
        tracks = range(1, n+1)

    for i in tracks:
        title = mb.GetResultData1(mq.MBE_AlbumGetTrackName, i)
        length = mb.GetResultInt1(mq.MBE_AlbumGetTrackDuration, i)
        id = mb.GetResultData1(mq.MBE_AlbumGetTrackId, i).split("/")[-1]
        song = asyaml.Song(artist=artist, title=title, length=length/1000,
            album=album, mbid=id)
        print song
