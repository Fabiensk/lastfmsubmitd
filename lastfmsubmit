#!/usr/bin/python

import sys
import time
import getopt
import locale
import fcntl

import lastfm
import lastfm.asyaml
import lastfm.logger

"""This program accepts information about a played song on the commandline,
generates a submission in lastfmsubmitd format, and sends it to the running
lastfmsubmitd."""

if __name__ == '__main__':

    log = lastfm.logger.create_log("lastfmsubmit")

    encoding = locale.getpreferredencoding()

    shortopts = 'a:s:l:d:b:m:o:'
    longopts = [
        'artist=',
        'title=',
        'length=',
        'time=',
        'album=',
        'mbid=',
        'output=',
        ]

    subinfo = { 'time': time.gmtime(), }
    outfile = lastfm.SUBMITD_FIFO

    try:
        opts, args = getopt.getopt(sys.argv[1:], shortopts, longopts)
    except getopt.GetoptError, e:
        print >>sys.stderr, "error: %s" % e
        sys.exit(1)
    if args:
        print >>sys.stderr, "extra args: %s" % ' '.join(args)
        sys.exit(1)

    for opt, arg in opts:
        if opt in ('--artist', '-a'):
            subinfo['artist'] = unicode(arg, encoding)
        elif opt in ('--title', '-t'):
            subinfo['title'] = unicode(arg, encoding)
        elif opt in ('--length', '-l'):
            try:
                subinfo['length'] = lastfm.asyaml.parse_length(arg)
            except ValueError:
                log.error("could not parse length %s" % arg)
                sys.exit(1)
        elif opt in ('--time', '-i'):
            try:
                subinfo['time'] = lastfm.asyaml.parse_time(arg)
            except ValueError:
                log.error("could not parse time %s" % arg)
                sys.exit(1)
        elif opt in ('--album', '-b'):
            subinfo['album'] = unicode(arg, encoding)
        elif opt in ('--mbid', '-m'):
            subinfo['mbid'] = arg
        elif opt in ('--output', '-o'):
            outfile = arg

    try:
        sub = lastfm.asyaml.Submission(**subinfo)
    except ValueError:
        log.error("must specify at least artist, title, and length")
        sys.exit(1)

    if outfile == "-":
        print sub
    else:
        try:
            out = file(outfile, 'w')
            log.debug("Requesting lock on %s" % outfile)
            fcntl.flock(out, fcntl.LOCK_EX)
            print >>out, sub
            fcntl.flock(out, fcntl.LOCK_UN)
            log.info("Queued %s for submission", sub.shortname())
        except IOError:
            log.error("Could not open %s" % outfile)
            sys.exit(1)
