#!/usr/bin/python

import sys
import os
import stat
import time
import getopt
import select
import urllib
import md5

import lastfm
import lastfm.logger
import lastfm.asyaml

CLIENT_ID = "lsd"
CLIENT_VERSION = "0.1"
PROTOCOL_VERSION = "1.1"

HANDSHAKE_URL_BASE = "http://post.audioscrobbler.com/"
DEF_INTERVAL = 30

SUB_CHUNK_SIZE = 10

BACKOFF_START = 60
BACKOFF_INCREMENT = 60

FIFO_TIMEOUT = 5

class HandshakeError(Exception): pass
class SubTimeoutError(Exception): pass
class SessionError(Exception): pass
class InvalidSubError(Exception): pass

class Backoff:
    def __init__(self, log):
        self.log = log
        self.reset()
    def reset(self):
        self.backoff = BACKOFF_START
    def sleep(self):
        self.log.info("Retrying in %d" % self.backoff)
        time.sleep(self.backoff)
        self.backoff += BACKOFF_INCREMENT

class SubCache:
    def __init__(self, log, filename):
        self.log = log
        self.subs = []
        try:
            cache = file(filename)
            stored = lastfm.asyaml.Parser(cache.read())
            for sub in stored.parse():
                self.subs.append(sub)
        except IOError:
            pass

    def dump(self, filename):
        try:
            log.info("Saving %d subs to cache" % len(cache.subs))
            out = file(filename, 'w')
            out.write("\n".join(map(str, self.subs)))
            out.write("\n")
            self.subs = []
        except IOError:
            self.log.error("Cannot write to %s, discarding %d subs" %
                (filename, len(self.subs)))

class SubFifo:
    def __init__(self, log, fifoname):
        self.log = log
        self.fifoname = fifoname
        try:
            if not stat.S_ISFIFO(os.stat(fifoname).st_mode):
                self.log.error("%s exists but is not a fifo, exiting")
                sys.exit(1)
        except OSError:
            self.log.debug("Creating %s" % fifoname)
            os.mkfifo(self.fifoname)

    def read(self):
        fifo = file(fifoname)
        return fifo.read()

    def select(self, timeout):
        fifo_fd = os.open(self.fifoname, os.O_NONBLOCK)
        fifo = os.fdopen(fifo_fd)
        data = []
        while True:
            readees, writees, errs = select.select([fifo], [], [], timeout)
            if fifo in readees:
                stuff = fifo.read()
                if len(stuff):
                    self.log.debug("Read %d bytes" % len(stuff))
                    data.append(stuff)
                else:
                    self.log.debug("Done reading I guess")
                    break
            else:
                self.log.debug("Nothing to read")
                break
        os.close(fifo_fd)
        return ''.join(data)

class LastFmSession:
    def __init__(self, log, backoff, user, password):
        self.log = log
        self.backoff = backoff
        self.user = user
        self.password = password
        self.connected = False
        self.backoff = BACKOFF_START
        self.interval = DEF_INTERVAL
        self.uncommitted_subs = []
        self.handshake_url = self.make_handshake_url(user)
        self.submit_url = None

    def make_handshake_url(self, user):
        args = {
            'hs': 'true',
            'p': PROTOCOL_VERSION,
            'c': CLIENT_ID,
            'v': CLIENT_VERSION,
            'u': user,
            }
        return "?".join([HANDSHAKE_URL_BASE, urllib.urlencode(args)])

    def handshake(self):
        self.log.debug("Handshake URL: %s" % self.handshake_url)

        try:
            response = urllib.urlopen(self.handshake_url)
            status_line = response.readline().strip()
        except IOError, e:
            raise HandshakeError(e)

        if status_line == "UPTODATE":
            self.read_submit_url(response)
        elif status_line.startswith("UPDATE"):
            try:
                msg, url = status_line.split(" ")
                self.log.warning("Plugin is out of date: %s" % msg)
                self.log.info("Please go to %s to upgrade" % url)
            except ValueError:
                self.log.warning("Plugin is out of date")
            self.read_submit_url(response)
        elif status_line == "BADUSER":
            raise HandshakeError("bad username")
        elif status_line.startswith("FAILED"):
            try:
                failed, reason = status_line.split(" ")
            except ValueError:
                reason = "unknown"
            raise HandshakeError("failed: %s" % reason)
        else:
            raise HandshakeError("could not parse response: %s" % status_line)

        self.read_interval(response)

        self.connected = True
        self.backoff.reset()

    def read_submit_url(self, response):
        challenge = response.readline().strip()
        self.session_key = self.digest(challenge)
        self.submit_url = response.readline().strip()
        self.log.info("Handshake sucessful")
        self.log.debug("Submit URL: %s" % self.submit_url)

    def read_interval(self, response):
        interval_line = response.readline().strip()
        if interval_line and interval_line.startswith("INTERVAL"):
            msg, secs = interval_line.split(" ")
            new_interval = int(secs)
            if new_interval != self.interval:
                log.debug("Session interval changed to %d" % new_interval)
                self.interval = new_interval

    def digest(self, challenge):
        pass_hash = md5.new(self.password)
        sess_hash = md5.new(pass_hash.hexdigest() + challenge)
        return sess_hash.hexdigest()

    def submit(self, cache):
        try:
            self.do_submit(cache)
            self.backoff.reset()
        except SessionError, e:
            self.log.error("Session failed: %s" % e)
            self.log.debug("%d subs remain in cache" % len(cache.subs))
            self.backoff.sleep()
            raise
        except InvalidSubError, e:
            self.log.error("Submission failed: %s" % e)
            self.log.debug("%d subs remain in cache" % len(cache.subs))
            self.backoff.sleep()
        except SubTimeoutError:
            self.log.error("Submission timed out")
            self.log.debug("%d subs remain in cache" % len(cache.subs))
            self.backoff.sleep()

    def do_submit(self, cache):
        while cache.subs:
            if len(cache.subs) > SUB_CHUNK_SIZE:
                chunk = cache.subs[:SUB_CHUNK_SIZE]
                cache.subs = cache.subs[SUB_CHUNK_SIZE:]
            else:
                chunk = cache.subs
                cache.subs = []

            args = { 'u': self.user, 's': self.session_key }
            post_data = [urllib.urlencode(args)]
            for i in range(0, len(chunk)):
                args = {}
                args['a[%d]' % i] =  chunk[i].artist.encode('utf-8')
                args['t[%d]' % i] =  chunk[i].title.encode('utf-8')
                args['l[%d]' % i] =  str(chunk[i].length)
                args['i[%d]' % i] =  lastfm.asyaml.format_time(chunk[i].time)
                if hasattr(chunk[i], 'album'):
                    args['b[%d]' % i] = chunk[i].album.encode('utf-8')
                else:
                    args['b[%d]' % i] = ''
                if hasattr(chunk[i], 'mbid'):
                    args['m[%d]' % i] = (chunk[i].mbid)
                else:
                    args['m[%d]' % i] = ''
                self.log.info("Submitting: %s" % chunk[i].shortname())
                post_data.append(urllib.urlencode(args))

            post_str = '&'.join(post_data)
            self.log.debug("POST data: %s" % post_str)
            try:
                response = urllib.urlopen(self.submit_url, post_str)
            except IOError:
                cache.subs = chunk + cache.subs
                raise SubTimeoutError
            except KeyboardInterrupt:
                cache.subs = chunk + cache.subs
                raise

            failed = False
            status_line = response.readline().strip()

            if status_line == "OK":
                self.log.info("Submission(s) accepted")
            elif status_line == "BADAUTH":
                cache.subs = chunk + cache.subs
                self.connected = False
                raise SessionError("incorrect password")
            elif status_line.startswith("FAILED"):
                try:
                    failed, reason = status_line.split(" ")
                except ValueError:
                    reason = "unknown"
                cache.subs = chunk + cache.subs
                raise InvalidSubError("failed: %s" % reason)
            else:
                cache.subs = chunk + cache.subs
                raise InvalidSubError("could not parse response: %s" %
                    status_line)

            self.read_interval(response)
            time.sleep(self.interval)

if __name__ == '__main__':
    log = lastfm.logger.create_log("lastfmsubmitd")
    log.info("Last.fm Submission Daemon starting")

    backoff = Backoff(log)

    shortopts = 'u:p:'
    longopts = ['user=', 'password=']

    try:
        opts, args = getopt.getopt(sys.argv[1:], shortopts, longopts)
    except getopt.GetoptError, e:
        print >>sys.stderr, "error: %s" % e
        sys.exit(1)
    if args:
        print >>sys.stderr, "extra args: %s" % ' '.join(args)
        sys.exit(1)

    try:
        user = os.environ['LASTFM_USER']
    except KeyError:
        user = None
    try:
        password = os.environ['LASTFM_PASSWORD']
    except KeyError:
        password = None

    for opt, arg in opts:
        if opt in ('--user', '-u'):
            user = arg
        elif opt in ('--password', '-p'):
            password = arg
        else:
            print >>sys.stderr, "unknown option: %s", opt
            sys.exit(1)

    if not (user and password):
        print >>sys.stderr, "error: user and password are required"
        sys.exit(1)

    fifo = SubFifo(log, lastfm.SUBMITD_FIFO)
    session = LastFmSession(log, backoff, user, password)
    cache = SubCache(log, lastfm.SUBMITD_CACHE)
    if cache.subs:
        log.info("Read %d subs from cache", len(cache.subs))

    try:
        while True:
            if not session.connected:
                try:
                    session.handshake()
                    backoff.reset()
                except HandshakeError, e:
                    log.error("Handshake failed: %s" % e)
                    backoff.sleep()
            if session.connected and cache.subs:
                try:
                    log.debug("Attempting submit, %d subs" % len(cache.subs))
                    session.submit(cache)
                    log.debug("Done, %d subs left" % len(cache.subs))
                except SessionError:
                    log.debug("Lost session")
            try:
                incoming = lastfm.asyaml.Parser(fifo.select(FIFO_TIMEOUT))
                count = 0
                for sub in incoming.parse():
                    cache.subs.append(sub)
                    count += 1
                if count:
                    log.debug("Read %d subs from %s" %
                        (count, lastfm.SUBMITD_FIFO))
            except ValueError, e:
                log.error("Discarding invalid data: %s" % e)
                pass

    except KeyboardInterrupt:
        cache.dump(lastfm.SUBMITD_CACHE)
        log.info("Exiting")
