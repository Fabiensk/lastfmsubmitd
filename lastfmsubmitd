#!/usr/bin/python

import sys
import os
import time
import calendar
import getopt
import socket
import urllib
import signal

try:
    from hashlib import md5
except ImportError:
    from md5 import new as md5

import lastfm
import lastfm.client
import lastfm.config
import lastfm.marshaller

import pylast

DAEMON_NAME = 'lastfmsubmitd'
USAGE = 'usage: %s [--debug] [--no-daemon] [--no-network] [--help]' % \
    DAEMON_NAME

CLIENT_ID = 'lsd'
CLIENT_VERSION = '1.0.6'

SERVER_URL = 'http://post.audioscrobbler.com/'
DEF_INTERVAL = 1

# This should be something small, because the server times out quickly. If
# there is any congestion at either end of the network, it will give up and
# try to process a partial read, leading to "not all request variables set"
# errors. So, there is little point in waiting around for the rest of the data
# to get there. Of course, we don't want to time out *faster* than the server
# does, because after a timeout we assume none of the subs went through at all
# and will thus retry all of them. If half of the subs were actually read this
# will lead to duplicate submits which will then have to be dropped by the
# spam filter.

HTTP_TIMEOUT = 30

# This, on the other hand, is totally arbitrary.

INITIAL_BACKOFF = 60

# Lame shortcut

def utf8(a):
    return unicode(a).encode('utf-8')

class HandshakeError(Exception): pass
class SubTimeoutError(Exception): pass
class SessionError(Exception): pass
class InvalidSubError(Exception): pass
class NoAccountError(Exception): pass

class Throttle:
    """Very simple throttler that ensures we sleep long enough between network
    requests, but lets you sleep a little at a time and then wake to do other
    stuff. Only keeps track of how long it has slept, not the actual time
    elapsed. You can mess with time.slept to simulate a sleep."""

    def __init__(self, cli):
        self.cli = cli
        self.reset()

    def reset(self):
        self.slept = 0
        self.sleep_until = 0

    def ready(self):
        return self.slept >= self.sleep_until

    def backoff(self):
        self.slept = 0
        if self.sleep_until < INITIAL_BACKOFF:
            self.sleep_until = INITIAL_BACKOFF
        elif self.sleep_until < 6 * 3600:
            self.sleep_until *= 2
        self.cli.log.info('Backing off, will retry in %d:%02d' %
            divmod(self.sleep_until, 60))

    def sleep(self, secs):
        time.sleep(secs)
        self.slept += secs

class LsdSpool:
    """Represents uncommitted submissions on disk. May be extended by writing
    a new file in the spool directory."""

    def __init__(self, cli):
        self.cli = cli
        self.files = []
        self.subs = []

    def poll(self):
        new_subs = []
        for f in os.listdir(self.cli.conf.spool_path):
            path = '%s/%s' % (self.cli.conf.spool_path, f)
            if path not in self.files:
                self.files.append(path)
                data = file(path)
                for doc in lastfm.marshaller.load_documents(data):
                    try:
                        for reqd in ('artist', 'title', 'length', 'time'):
                            if not doc.has_key(reqd):
                                raise ValueError('missing %s' % reqd)
                        else:
                            new_subs.append(doc)
                    except ValueError, e:
                        self.cli.log.warning('Invalid data, ignoring: %s' % e)
        if new_subs:
            self.cli.log.debug('Read %d sub(s)' % len(new_subs))
        self.subs += new_subs
        self.subs.sort(key=lambda x: x['time'])

    def sync(self):
        for f in self.files:
            os.unlink(f)
        if self.subs:
            newfile = self.cli.submit_many(self.subs)
            self.files = [newfile]
        else:
            self.files = []

class LastFmSession:
    def __init__(self, cli):
        self.cli = cli
        self.connected = True
        self.interval = DEF_INTERVAL
        API_KEY = "1f69db80ecd47ee4c669a471d259f522"
        API_SECRET = "7ad6d396a3a0d526bb50ab8c9af5a3da"
        self.network = pylast.LibreFMNetwork(api_key=API_KEY, api_secret=API_SECRET,
                        username=self.cli.conf.user, password_hash=pylast.md5(self.cli.conf.password))

    def submit(self, spool):
        records = []
        for sub in spool.subs:
            rec = {}
            rec['artist'] = sub['artist']
            rec['title'] = sub['title']
            rec['timestamp'] = calendar.timegm(sub['time'])
            rec['album'] = sub['album']
            rec['duration'] = sub['length']
            records.append(rec)
        self.network.scrobble_many(records)
        spool.subs = []
        spool.sync()


class LsdConfig(lastfm.config.Config):
    def __init__(self):
        lastfm.config.Config.__init__(self, name=DAEMON_NAME)
        self.url = self.cp.get('server', 'url', SERVER_URL)
        self.user = self.cp.get('account', 'user', None)
        self.password = self.cp.get('account', 'password', None)
        if not (self.user and self.password):
            raise NoAccountError

def daemon(cli, online):
    session = LastFmSession(cli)
    spool = LsdSpool(cli)
    throttle = Throttle(cli)

    def shutdown(signum, frame):
        spool.sync()
        cli.cleanup()
        sys.exit(0)

    def alarm(signum, frame):
        cli.log.debug('Resuming on alarm')

    def reinit(signum, frame):
        # XXX: reread config, reopen log, reset throttle, rehandshake
        pass

    signal.signal(signal.SIGTERM, shutdown)
    signal.signal(signal.SIGINT, shutdown)
    signal.signal(signal.SIGHUP, reinit)
    signal.signal(signal.SIGALRM, alarm)

    while True:
        if throttle.ready():
            spool.poll()

            if online and not session.connected:
                try:
                    session.handshake()
                    throttle.reset()
                except HandshakeError, e:
                    cli.log.error('Handshake failed: %s' % e)
                    throttle.backoff()

            if session.connected and spool.subs:
                try:
                    cli.log.debug('Doing submit, %d sub(s)' % len(spool.subs))
                    session.submit(spool)
                    cli.log.debug('Done, %d in spool' % len(spool.subs))
                    throttle.reset()
                except SessionError, e:
                    cli.log.error('Session failed: %s' % e)
                    throttle.backoff()
                except InvalidSubError, e:
                    cli.log.error('Submission failed: %s' % e)
                    throttle.backoff()
                except SubTimeoutError:
                    cli.log.error('Submission timed out')
                    throttle.backoff()
                except Exception as e:                
                    cli.log.error('Other error')
                    throttle.backoff()

        throttle.sleep(cli.conf.sleep_time)

if __name__ == '__main__':
    shortopts = 'dnlh'
    longopts = ['debug', 'no-daemon', 'no-network', 'help']

    try:
        opts, args = getopt.getopt(sys.argv[1:], shortopts, longopts)
    except getopt.GetoptError, e:
        print >>sys.stderr, '%s: %s' % (DAEMON_NAME, e)
        print >>sys.stderr, USAGE
        sys.exit(1)

    debug = False
    fork = True
    stderr = False
    online = True

    for opt, arg in opts:
        if opt in ('--debug', '-d'):
            debug = True
        elif opt in ('--no-daemon', '-n'):
            fork = False
            stderr = True
        elif opt in ('--no-network', '-l'):
            online = False
        elif opt in ('--help', '-h'):
            print USAGE
            sys.exit(0)

    try:
        conf = LsdConfig()
    except NoAccountError:
        print >>sys.stderr, '%s: no account info found; exiting' % \
            DAEMON_NAME
        sys.exit(0)

    if conf.debug:
        debug = True

    cli = lastfm.client.Daemon(DAEMON_NAME, conf)
    cli.daemonize(fork)
    cli.open_log(debug, stderr)

    try:
        cli.log.info('Starting')
        daemon(cli, online)
    except SystemExit, e:
        cli.log.info('Exiting')
        sys.exit(e.args[0])
    except:
        import traceback
        einfo = traceback.format_exception(*sys.exc_info())
        cli.log.error('Aborting: %s' % ''.join(einfo))
        sys.exit(1)
